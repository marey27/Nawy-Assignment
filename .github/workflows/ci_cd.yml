name: CI/CD Pipeline (Test, Build, Deploy)

on:
  push:
    branches: [master]

jobs:
  lint_and_test:
    name: "1. Lint and Test"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - run: npm install
      - run: npm test

  build_and_push:
    name: "2. Build and Push"
    needs: lint_and_test
    runs-on: ubuntu-latest
    env:
      REPOSITORY: nawy-assignment
      IMAGE_TAG: latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${REPOSITORY}:${IMAGE_TAG} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${REPOSITORY}:${IMAGE_TAG}

  deploy:
    name: "3. Deploy"
    needs: build_and_push
    runs-on: self-hosted
    env:
      REPOSITORY: nawy-assignment
      IMAGE_TAG: latest
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get install -y unzip
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      - run: |
          cat <<'EOF' > main.tf
          terraform {
            required_providers {
              docker = {
                source  = "kreuzwerker/docker"
                version = "3.0.2"
              }
            }
          }

          provider "docker" {}

          variable "dockerhub_username" {}
          variable "repository" {}
          variable "image_tag" {
            default = "latest"
          }

          resource "docker_container" "app_container" {
            name  = "node-hello"
            image = "${var.dockerhub_username}/${var.repository}:${var.image_tag}"
            ports {
              internal = 3000
              external = 3000
            }
            restart = "unless-stopped"
          }
          EOF

          terraform init
          terraform apply -auto-approve \
            -var="dockerhub_username=${DOCKERHUB_USERNAME}" \
            -var="repository=${REPOSITORY}" \
            -var="image_tag=${IMAGE_TAG}"
